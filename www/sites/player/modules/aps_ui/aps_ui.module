<?php
/**
 * @file
 * aps Custom tracking module, connects to the onBeforeUnload API.
 */

/**
 * Implements hook_form_FORMID_alter().
 */
function aps_ui_form_protected_node_enterpassword_alter(&$form, &$form_state, $form_id) {
  drupal_set_title(t('Enter Password'));

  $form['protected_node_enterpassword']['#description'] = t('The page you are trying to view is password protected. Please enter the password to proceed.');
  $form['protected_node_enterpassword']['submit']['#value'] = t('Submit');
  unset($form['protected_node_enterpassword']['password']['#title']);
}

/**
 * Implementats hook_field_formatter_info().
 */
function aps_ui_field_formatter_info() {
	$formatters = array();

  	$formatters['vimeo_link_formatter_full_player'] = array(
	    'label' => t('Vimeo Player Fullscreen'),
	    'description' => t('Embeds a Vimeo player, if the URL is for a Vimeo.com video page with the option to allow full screen.'),
	    'field types' => array('link_field'),
	    'settings' => vimeo_link_formatter_default_settings_player(),
  	);

 	return $formatters;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function aps_ui_field_formatter_settings_summary($field, $instance, $view_mode) {
  module_load_include('inc', 'vimeo_link_formatter', 'vimeo_link_formatter.admin');
  // Call the function which handles this formatter.
  $function = __FUNCTION__ . '_' . $instance['display'][$view_mode]['type'];
  return call_user_func($function, $field, $instance, $view_mode);
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function aps_ui_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  module_load_include('inc', 'vimeo_link_formatter', 'vimeo_link_formatter.admin');
  // Call the function which handles this formatter.
  $function = __FUNCTION__ . '_' . $instance['display'][$view_mode]['type'];
  return call_user_func($function, $field, $instance, $view_mode, $form, $form_state);
}

/**
 * Implements hook_field_formatter_view().
 */
function aps_ui_field_formatter_view(&$entity_type, &$entity, &$field, &$instance, &$langcode, &$items, &$display) {
  // Call the function which handles this formatter.
  $function = __FUNCTION__ . '_' . $display['type'];
  return call_user_func($function, $entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Implements vimeo_link_formatter_field_formatter_view_FORMATTER();
 *
 * Renders $items as <iframe>s for the vimeo_link_formatter_player formatter.
 *
 * @return Array
 *    A render()-compatible array of #markup strings, E.g.
 *      <iframe src="http://player.vimeo.com/video/14309120?title=0&amp;
 *      byline=0&amp;portrait=0&amp;color=c9ff23&amp;autoplay=1&amp;loop=1"
 *      width="400" height="225" frameborder="0"></iframe>
 */
function aps_ui_field_formatter_view_vimeo_link_formatter_full_player($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Attributes for the <iframe>.
  // Makes IE's <iframe> borders play nicely.
  $attributes = array('frameborder' => 0);
  $settings = array('width', 'height');
  foreach ($settings as $name) {
    $attributes[$name] = $display['settings'][$name];
  }
  $player_id = drupal_html_id('vimeo-player');
  $attributes['id'] = $player_id;

  // Add in the fullscreen attributes
  $attributes['webkitallowfullscreen'] = 'true';
  $attributes['mozallowfullscreen'] = 'true';
  $attributes['allowfullscreen'] = 'true';

  $attributes = drupal_attributes($attributes);

  // Default Vimeo Player formatter settings.
  $defaults = aps_vimeo_link_formatter_default_settings_player();

  // Options for Drupal's url() function.
  $url_options = array('query' => array(), 'external' => TRUE);

  // Build up the query string.
  foreach ($display['settings'] as $name => $value) {
    // Vimeo does not pay attention to the value of the paramter, but
    // whether the parameter is set or not.  So it is important not to set
    // parameters to their default values.  I.e.
    //   Do not set title=1, because that is Vimeo.com's default, and setting
    //   title=1 will cause the same effect as setting title=0, which is not
    //   desirable.
    // Also, skip over the settings used for attributes.
    if (!in_array($name, $settings) && isset($defaults[$name]) && $defaults[$name] !== $value) {
      if ($name == 'js_api') {
        $url_options['query']['api'] = 1;
        $url_options['query']['player_id'] = $player_id;
      }
      else {
        $url_options['query'][$name] = $value;
      }
    }
  }

  $ret = array();
  foreach ($items as $delta => $item) {
    // Extract the ID from the URL.
    if ($vimeo = vimeo_link_formatter_id($item['url'])) {
      // Allow modules to alter embed code.
      $embed = array(
        'title' => $item['title'],
        'url_options' => $url_options,
        'attributes' => $attributes,
      );
      drupal_alter('vimeo_link_formatter_embed', $embed, $item, $display);

      $url = url($vimeo['protocol'] . '://player.vimeo.com/video/' . $vimeo['id'], $embed['url_options']);
      $title = check_plain($embed['title']);

      $ret[] = array('#markup' => '<iframe title="' . $title . '" src="' . $url . '"' . $embed['attributes'] . '></iframe>');
    }
    else {
      // The link is not a valid Vimeo.com link.
      // @todo Handle this better, perhaps with node-form validation or more
      // formatter settings?
    }
  }
  return $ret;
}

/**
 * Vimeo.com's default player settings.
 *
 * @see vimeo_link_formatter_field_formatter_settings_form_vimeo_link_formatter_player()
 *
 * @return Array
 *    Default values keyed by the setting name.
 */
function aps_vimeo_link_formatter_default_settings_player() {
  $defaults = array(
    // Use the data types that Form API forms return them as;  Integer for
    // Booleans, and Strings for text-input numbers.
    'title' => 0,
    'byline' => 0,
    'portrait' => 0,
    'color' => '5f5f5f',
    'autoplay' => 1,
    'loop' => 0,
    'width' => '100%',
    'height' => '664',
    'js_api' => 1,
  );
  return $defaults;
}