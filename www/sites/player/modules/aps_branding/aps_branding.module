<?php
/**
 * @file
 * aps Custom tracking module, connects to the onBeforeUnload API.
 */

/**
 * Implements hook_node_view().
 */
function aps_branding_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'menu_page' && $view_mode == 'full') {
    $node_wrapper = entity_metadata_wrapper('node', $node);

    $css = '';
    if ($branding_node = $node_wrapper->field_branding->value()) {
      $branding_wrapper = entity_metadata_wrapper('node', $branding_node);

      foreach ($branding_wrapper->field_background_colours->value() as $key => $hex) {
        $css .= '.bg-colour-' . convert_number_to_words($key + 1) . ' { background-color: ' . $hex . ';}' . "\n";
      }

      foreach ($branding_wrapper->field_font_colours->value() as $key => $hex) {
        $css .= '.font-colour-' . convert_number_to_words($key + 1) . ' { color: ' . $hex . ';}' . "\n";
      }

      if ($branding_node->field_font) {
        foreach ($branding_node->field_font[LANGUAGE_NONE] as $key => $entry) {
          $font_family = fontyourface_get_font($entry['font_face']);
          $css .= '.font-' . convert_number_to_words($key + 1) . ' { ' . fontyourface_font_css($font_family) . ' }' . "\n";
        }
      }

      if ($branding_wrapper->field_css->value()) {
        $branding_css = replace_css_tokens($branding_wrapper->field_css->value(), $branding_node, TRUE);
        if ($branding_css) drupal_add_css($branding_css, array('group' => CSS_THEME, 'type' => 'inline', 'preprocess' => FALSE, 'weight' => '200'));
      }
    }

    drupal_add_css($css, array('group' => CSS_THEME, 'type' => 'inline', 'preprocess' => FALSE));

    // Check the additional CSS box
    if ($node_wrapper->field_css->value()) {
      $additional_css = replace_css_tokens($node_wrapper->field_css->value(), $node);
      if ($additional_css) drupal_add_css($additional_css, array('group' => CSS_THEME, 'type' => 'inline', 'preprocess' => FALSE, 'weight' => '9999'));
    }
  }
}

function replace_css_tokens($css, $node, $branding = FALSE) {
  // Setup necessary variables
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $branding_node = ($branding) ? $node : $node_wrapper->field_branding->value();
  $branding_wrapper = entity_metadata_wrapper('node', $branding_node);
  $css_rows = explode(PHP_EOL, $css);

  // Add the prefix for the branding class or the default page class
  $branding_prefix = preg_replace('/[^\da-z]/i', '-', drupal_strtolower($branding_node->title));
  preg_match_all('!\d+!', $branding_prefix, $numbers);
  foreach ($numbers[0] as $key => $num) {
    $prefix = str_replace($num, convert_number_to_words($num), $branding_prefix);
  }
  $branding_prefix = '.branding-' . $branding_prefix . ' ';
  $prefix = ($branding)? $branding_prefix : '.page-node ';

  // Add the CSS as required
  $additional_css = '';
  foreach($css_rows as $row => $text) {
    if (drupal_strlen(trim($text)) < 1 || strpos($text, '/*') || strpos($text, '*/')) {
      continue;
    }

    $text = $prefix . $text;
    // Are there any tokens included in the CSS code
    if ($tokens = token_scan($text, array('node' => $node))) {
      foreach($tokens as $type => $array) {
        switch ($type) {
        case 'bg-colour':
          foreach($array as $key => $item) {
            if ($bg_colour = $branding_wrapper->field_background_colours[$key - 1]->value()) {
              $replacement = 'background-color: ' . $bg_colour . ';';
              $text = str_replace($item, $replacement, $text);
            }
            else {
              $text = str_replace($item, '', $text);
            }
          }

          break;

        case 'font-colour':
          foreach($array as $key => $item) {
            if ($font_colour = $branding_wrapper->field_font_colours[$key - 1]->value()) {
              $replacement = 'color: ' . $font_colour . ';';
              $text = str_replace($item, $replacement, $text);
            }
            else {
              $text = str_replace($item, '', $text);
            }
          }

          break;

        case 'font':
          foreach($array as $key => $item) {
            if (array_key_exists(($key - 1) , $branding_node->field_font[LANGUAGE_NONE])) {
              $font = $branding_node->field_font[LANGUAGE_NONE][$key - 1];
              $font_family = fontyourface_get_font($font['font_face']);
              $replacement = fontyourface_font_css($font_family);
              $text = str_replace($item, $replacement, $text);
            }
            else {
              $text = str_replace($item, '', $text);
            }
          }

          break;

        case 'image':
          foreach($array as $key => $item) {
            // Replace images text with the path to the file
            if (strstr($key, ':')) {
              $args = explode(':', $key);

              $img_id = $args[0] - 1;
              $style = $args[1];

              $token = '[node:field-images:' . $img_id . ':file:fid]';
              $image = file_load(token_replace($token , array('node' => $node)));
              $uri = image_style_path($style, $image->uri);
              if (file_exists($uri)) {
                $url = file_create_url($uri);
                $text = str_replace($item, $url, $text);
              }
              else {
                $url = file_create_url($image->uri);
                $text = str_replace($item, $url, $text);
              }
            } 
            else {
              $img_id = $key - 1;

              $token = '[node:field-images:' . $img_id . ':file:url]';
              $text = token_replace(str_replace($item, $token, $text), array('node' => $node));
            }
          }

          break;

        default:
          $text = token_replace($text, array('node' => $node));
          break;
        }
      }
    }

    $additional_css .= $text . "\n";
  }

  return $additional_css;
}