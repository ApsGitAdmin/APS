<?php
/**
 * @file
 * Code for the Camp Schedule feature.
 */

include_once 'aps_matrix.features.inc';

function template_preprocess_aps_matrix_grid(&$vars) {
  $view     = $vars['view'];

  // We need the raw data for this grouping, which is passed in as $vars['rows'].
  // However, the template also needs to use for the rendered fields.  We
  // therefore swap the raw data out to a new variable and reset $vars['rows']
  // so that it can get rebuilt.
  // Store rows so that they may be used by further preprocess functions.
  $result   = $vars['result'] = $vars['rows'];
  $vars['rows'] = array();
  $vars['field_classes'] = array();

  $args     = $view->args;
  $options  = $view->style_plugin->options;
  $handler  = $view->style_plugin;

  $filter = ($view->filter['field_meeting_time_value']->value['value'])? $view->filter['field_meeting_time_value']->value['value'] : NULL;

  $row_class_special = isset($options['row_class_special']) ? $options['row_class_special'] : TRUE;

  $headers = array();
  $rows = array();
  $meetings = array();
  foreach ($result as $key => $record) {
    if ($record->field_field_room_colour) {
      list($r,$g,$b) = sscanf($record->field_field_room_colour[0]['raw']['rgb'], "#%02x%02x%02x");
    } 
    else {
      $r = $g = $b = 160;
    }

    // Setup the header
    $headers[$record->node_field_data_field_room_nid] = array(
      'data' => t($record->node_field_data_field_room_title), 
      'header' => TRUE, 
      'class' => array('room'),
      'style' => array('background:rgb('. implode(',', array($r,$g,$b)) .')'),
    );

    if (!array_key_exists($record->node_field_data_field_room_nid, $rows)) {
      $rows[$record->node_field_data_field_room_nid] = array();
    }

    // Create an array of meetings into the rows array
    $meetings[$record->node_field_data_field_room_nid] = views_get_view_result('cluster_matrix_meeting_by_room', NULL, $record->node_field_data_field_room_nid);
 
    foreach ($meetings[$record->node_field_data_field_room_nid] as $key => $meeting) {
      // Get the start and end date in seconds of the meetings for the day
      $start_time = new DateTime($meeting->field_field_meeting_time[0]['raw']['value'], new DateTimeZone($meeting->field_field_meeting_time[0]['raw']['timezone_db']));
      $start_time->setTimezone(new DateTimeZone($meeting->field_field_meeting_time[0]['raw']['timezone']));
      $start = $start_time->format('Y-m-d H:i:s');
      $start = strtotime($start);
      $start -= strtotime('midnight', $start);

      $end_time = new DateTime($meeting->field_field_meeting_time[0]['raw']['value2'], new DateTimeZone($meeting->field_field_meeting_time[0]['raw']['timezone_db']));
      $end_time->setTimezone(new DateTimeZone($meeting->field_field_meeting_time[0]['raw']['timezone']));
      $end = $end_time->format('Y-m-d H:i:s');
      $end = strtotime($end);
      $end -= strtotime('midnight', $end);

      // 864 because there are 86400 seconds in a day, but you have to multiply by 100 to get %
      $top = $start / 864;
      $height = ($end - $start) / 864;
      $classes = '';
      $a = '0.3';

      // If the start and end time match, then it's classed as all day
      if ($start == $end) {
        $a = '0.15';
        $top = 0;
        $height = 100;
        $classes = ' all-day';
      }

      // Load the node teaser
      $teaser = node_view($meeting->_field_data['nid']['entity'], 'teaser');

      $output = '<div class="meeting'.$classes.'" style="top:'.$top.'%; height:'.$height.'%;background:rgba('.implode(',', array($r,$g,$b,$a)).');color:rgb('.implode(',', array($r,$g,$b)).');">';
      $output .= '<div class="meeting-content">';
      $output .= drupal_render($teaser);
      $output .= '</div>';
      $output .= '</div>';

      $rows[$record->node_field_data_field_room_nid]['data'] .= $output;
    }
  }

  // Add a 'now' line, so it's easier to see what should be on screen
  $now = REQUEST_TIME;
  $now -= strtotime('midnight', $now);
  $now = ($now / 864);

  foreach ($rows as &$row) {
    if ($now) {
      $row['data'] .= '<div class="timeline" style="top:'.$now.'%;">'.date('g:ia', REQUEST_TIME).'</div>';
    }
  }

  $vars['headers'][] = $headers;
  $vars['rows'][] = $rows;

  // Cope with an empty table
  if (!($vars['rows'][0])) {
    $vars['rows'][0][0] = $view->display_handler->render_area('empty');
    // Calculate the amounts of rows with output.
    $vars['field_attributes'][0][0]['colspan'] = count($vars['header']);
    $vars['field_classes'][0][0] = 'views-empty';
  }

  // Add the summary to the list if set.
  if (!empty($handler->options['summary'])) {
    $vars['attributes_array'] = array('summary' => filter_xss_admin($handler->options['summary']));
  }

  // Add the caption to the list if set.
  if (!empty($handler->options['caption'])) {
    $vars['caption'] = filter_xss_admin($handler->options['caption']);
  }
  else {
    $vars['caption'] = '';
  }
}