<?php
/**
 * @file
 * Main file for Collage Formatter module.
 */

/**
 * Implements hook_views_api().
 */
function aps_collageformatter_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Returns renderable array of collages.
 */
function aps_collageformatter_render_collage($images, $settings) {
  $collage = array();

  // Remove images to skip.
  if ($settings['images_to_skip']) {
    $images = array_slice($images, $settings['images_to_skip']);
  }
  // Prepare images.
  foreach ($images as $delta => &$image) {
    if (!isset($image['width']) || !isset($image['height'])) {
      if ($image_info = image_get_info($image['uri'])) {
        $image += $image_info;
      }
    }
    $image += array(
      'box_type' => 'image',
      'delta' => $delta,
      'total_width' => $image['width'] + 2 * $settings['border_size'] + $settings['gap_size'],
      'total_height' => $image['height'] + 2 * $settings['border_size'] + $settings['gap_size'],
    );
  }

  // Determine number of collages and how many images per collage.
  $collage_number = $settings['collage_number'];
  $images_per_collage = $settings['images_per_collage'] ? $settings['images_per_collage'] : round(count($images) / $collage_number);

  // Generate collages.
  while ($collage_number > 0) {
    $collage_number--;
    // If last collage and all images option - take all images.
    if ($collage_number == 0 && !$settings['images_per_collage']) {
      $collage_images = $images;
    }
    // Take set number of images for this collage.
    else {
      $collage_images = array_slice($images, 0, $images_per_collage);
      // Update images array and set as the last collage if there are no more images.
      if (!$images = array_slice($images, $images_per_collage)) {
        $collage_number = 0;
      }
    }

    // Generate collage layout.
    $box = _collageformatter_layout_box($collage_images, $settings['collage_orientation']);
    // Scale the collage.
    if ($settings['collage_width']) {
      $box['parent_total_width'] = $settings['collage_width'] - 2 * $settings['collage_border_size'];
      $dimensions = array('width' => $box['parent_total_width'] - $settings['gap_size']);
      $box = _collageformatter_scale_box($box, $dimensions);
      $box['parent_total_height'] = $box['total_height'] + $settings['gap_size'];
    }
    elseif ($settings['collage_height']) {
      $box['parent_total_height'] = $settings['collage_height'] - 2 * $settings['collage_border_size'];
      $dimensions = array('height' => $box['parent_total_height'] - $settings['gap_size']);
      $box = _collageformatter_scale_box($box, $dimensions);
      $box['parent_total_width'] = $box['total_width'] + $settings['gap_size'];
    }
    else {
      $box['parent_total_width'] = $box['total_width'] + $settings['gap_size'];
      $box['parent_total_height'] = $box['total_height'] + $settings['gap_size'];
    }

    // Resize the collage if both with and height are set.
    if ($settings['collage_width'] && $settings['collage_height']) {
      $box['parent_total_width'] = $settings['collage_width'] - 2 * $settings['collage_border_size'];
      $box['parent_total_height'] = $settings['collage_height'] - 2 * $settings['collage_border_size'];
      $dimensions = array(
        'width' => $box['parent_total_width'] - $settings['gap_size'],
        'height' => $box['parent_total_height'] - $settings['gap_size'],
      );
      $box = _collageformatter_resize_box($box, $dimensions);
    }

    // Check for upscaled images and prevent upscaling.
    if ($settings['prevent_upscale']) {
      $scale = _collageformatter_upscaling_check($box, $settings);
      if ($scale < 1) {
        $dimensions = array('width' => $scale * $box['total_width']);
        $box = _collageformatter_scale_box($box, $dimensions);
        $box['parent_total_width'] = $box['total_width'] + $settings['gap_size'];
        $box['parent_total_height'] = $box['total_height'] + $settings['gap_size'];
      }
    }

    $collage_wrapper_style = array();
    $collage_wrapper_style[] = 'max-width: ' . round($box['parent_total_width'] + 2 * $settings['collage_border_size'] - 0.5) . 'px;';
    // $collage_wrapper_style[] = 'box-sizing: border-box; -webkit-box-sizing: border-box; -moz-box-sizing: border-box;';

    $collage_style = array();
    // $collage_style[] = 'box-sizing: border-box; -webkit-box-sizing: border-box; -moz-box-sizing: border-box;';
    if ($settings['collage_border_size']) {
      $border = 'border: ' . $settings['collage_border_size'] . 'px solid';
      $border .= $settings['collage_border_color'] ? ' ' . $settings['collage_border_color'] : '';
      $collage_style[] = $border . ';';
    }
    if ($settings['gap_color']) {
      $collage_style[] = 'background-color: ' . $settings['gap_color'] . ';';
    }

    $collage_wrapper_class = array('collageformatter-collage-wrapper');
    if ($settings['image_link_modal'] == 'photoswipe') {
      $collage_wrapper_class[] = 'photoswipe-gallery';
    }

    $collage[] = array(
      '#theme' => 'collageformatter_collage',
      '#collage' => _aps_collageformatter_render_box($box, $settings),
      '#collage_wrapper_class' => implode(' ', $collage_wrapper_class),
      '#collage_wrapper_style' => implode(' ', $collage_wrapper_style),
      '#collage_style' => implode(' ', $collage_style),
      '#collage_bottom_style' => 'clear: both; margin-bottom: ' . 100 * ($settings['gap_size'] / round($box['parent_total_width'] - 0.5)) . '%',
    );
  }
  
  return $collage;
}

/**
 * Recursive function to render the box.
 */
function _aps_collageformatter_render_box($box, $settings) {
  $output = '';

  // Check if parent dimensions changed - and change yourself.
  if (array_key_exists('parent_box_orientation', $box)) {
    if ($box['parent_box_orientation'] == 'vertical') {
      $box['total_width'] = $box['parent_total_width'];
    }
    elseif ($box['parent_box_orientation'] == 'horizontal') {
      $box['total_height'] = $box['parent_total_height'];
    }
  }

  // Perform pixel check.
  if ($box['pixel_check']) {
    if ($box['parent_box_orientation'] == 'vertical') {
      $pixels = round($box['parent_total_height'] - 0.5) - round($box['total_height'] - 0.5) - round($box['siblings_total_height'] - 0.5);
      if ($pixels) {
        $box['total_height'] += $pixels;
      }
    }
    elseif ($box['parent_box_orientation'] == 'horizontal') {
      $pixels = round($box['parent_total_width'] - 0.5) - round($box['total_width'] - 0.5) - round($box['siblings_total_width'] - 0.5);
      if ($pixels) {
        $box['total_width'] += $pixels;
      }
    }
  }

  // Ensure that children have correct parent dimensions.
  if ($box['box_type'] == 'box') {
    $box[1]['parent_total_height'] = $box[2]['parent_total_height'] = $box['total_height'];
    $box[1]['parent_total_width'] = $box[2]['parent_total_width'] = $box['total_width'];
  }

  if ($box['box_type'] == 'box') {
    $box_style = array(
      'float: left;',
      'max-width: ' . round($box['total_width'] - 0.5) . 'px;',
    );
    $box_style[] = 'width: ' . 100 * (round($box['total_width'] - 0.5) / (round($box['parent_total_width'] - 0.5))) . '%;';
    $content[] = _aps_collageformatter_render_box($box[1], $settings);
    $content[] = _aps_collageformatter_render_box($box[2], $settings);
    $output = array(
      '#theme' => 'collageformatter_collage_box',
      '#box' => $content,
      '#box_style' => implode(' ', $box_style),
    );
  }
  elseif ($box['box_type'] == 'image') {
    $image_uri = _collageformatter_image_file_check($box, $settings);

    $vimeo_link = aps_collageformatter_vimeo_check($box['fid']);

    $image_style = array(
      'display: block;',
      'max-width: 100%;',
      'height: auto;',
      'margin: 0;',
    );

    // TODO: use theme('image_formatter', ... ?
    $image = theme('image_style', array(
      'style_name' => 'collageformatter',
      'path' => $image_uri,
      'alt' => $box['alt'],
      'title' => $box['title'],
      'attributes' => array(
        'style' => implode(' ', $image_style),
      ),
    ));

    // Create image derivatives.
    if ($settings['generate_image_derivatives']) {
      $derivative_uri = image_style_path('collageformatter', $image_uri);
      if (!file_exists($derivative_uri)) {
        $image_style = image_style_load('collageformatter');
        if (!image_style_create_derivative($image_style, $image_uri, $derivative_uri)) {
          watchdog('collageformatter', 'Unable to generate the derived image located at %path.', array('%path' => $derivative_uri));
        }
      }
    }

    $attached = array();
    // Process image linking and modal gallery settings.
    if ($settings['image_link'] == 'content') {
      $class = $settings['image_link_class'] ? array($settings['image_link_class']) : array();
      $rel = $settings['image_link_rel'];
      $image = l($image,
        $box['content_uri'],
        array(
          'attributes' => array(
            'title' => $box['title'],
            'class' => $class,
            'rel' => $rel,
          ),
          'html' => TRUE,
        )
      );
    }
    elseif ($settings['image_link'] == 'file') {
      $image_dimensions = array(
        'width' => $box['width'],
        'height' => $box['height'],
      );
      if (empty($settings['image_link_image_style'])) {
        $image_url = file_create_url($box['uri']);
      }
      else {
        $image_url = image_style_url($settings['image_link_image_style'], $box['uri']);
        image_style_transform_dimensions($settings['image_link_image_style'], $image_dimensions);
      }

      $class = $settings['image_link_class'] ? array($settings['image_link_class']) : array();
      $rel = $settings['image_link_rel'];
      $attributes = array();
      switch ($settings['image_link_modal']) {
        case 'colorbox':
          $class[] = 'colorbox';
          $rel = 'colorbox-' . $settings['gallery'];
          break;
        case 'shadowbox':
          $rel = 'shadowbox[' . $settings['gallery'] . ']';
          break;
        case 'fancybox':
          $class[] = 'fancybox';
          $attributes['data-fancybox-group'] = 'fancybox-' . $settings['gallery'];
          break;
        case 'photobox':
          $class[] = 'photobox';
          $attached = photobox_attached_resources();
          $attributes['data-photobox-gallery'] = 'photobox-' . $settings['gallery'];
          break;
        case 'photoswipe':
          $class[] = 'photoswipe';
          photoswipe_load_assets();
          $attributes['data-size'] = $image_dimensions['width'] . 'x' . $image_dimensions['height'];
          break;
        case 'lightbox2':
          $rel = 'lightbox[' . $settings['gallery'] . ']';
          break;
        default:
      }

      if ($vimeo_url = aps_collageformatter_vimeo_check($box['fid'])) {
        $image_url = convert_vimeo($vimeo_url);
        $rel = 'video';
      }

      $image = l($image, $image_url,
        array(
          'attributes' => array(
            'title' => $box['title'],
            'class' => $class,
            'rel' => $rel,
          ) + $attributes,
          'html' => TRUE,
        )
      );
    }

    $image_wrapper_style = array(
      'float: left;',
      'max-width: ' . round($box['total_width'] - $settings['gap_size'] - 0.5) . 'px;',
      'width: ' . 100 * (round($box['total_width'] - $settings['gap_size'] - 0.5) / round($box['parent_total_width'] - 0.5)) . '%;',
    );
    if ($settings['gap_size']) {
      $margin_percentage = 100 * ($settings['gap_size'] / round($box['parent_total_width'] - 0.5));
      $image_wrapper_style[] = 'margin: ' . $margin_percentage . '% 0 0 ' . $margin_percentage . '%;';
    }
    $border = '';
    if ($settings['border_size']) {
      $border = 'border: ' . $settings['border_size'] . 'px solid';
      if ($settings['border_color']) {
        $border .= ' ' . $settings['border_color'];
      }
      $border .= ';';
    }
    $output = array(
      '#theme' => 'collageformatter_collage_image',
      '#image' => $image,
      '#image_wrapper_class' => array('collageformatter-collage-image-wrapper-' . $box['delta']),
      '#image_wrapper_style' => implode(' ', $image_wrapper_style),
      '#image_style' => $border,
      '#attached' => $attached,
    );
  }

  return $output;
}

function convert_vimeo($url) {
  if(preg_match('/\/\/(www\.)?vimeo.com\/(\d+)($|\/)/', $url, $matches)) {
    $id = $matches[2];  
    return url('//player.vimeo.com/video/' . $id, array('absolute' => TRUE, 'query' => array('autoplay' => 1)));
  }
}

function aps_collageformatter_vimeo_check($fid) {
  $query = db_select('node', 'n')
  ->fields('i', array('field_iframe_url'))
  ->condition('fu.fid', $fid, '=');

  $query->leftJoin('file_usage', 'fu', 'n.nid = fu.id');
  $query->leftJoin('field_data_field_iframe', 'i', 'n.nid = i.entity_id');
  
  $result = $query->execute();

  return $result->fetchField();
}